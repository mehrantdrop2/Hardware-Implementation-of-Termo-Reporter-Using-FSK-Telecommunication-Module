;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 12/27/2019
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega32A
;Program type            : Application
;AVR Core Clock frequency: 4.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;
;#include <mega32a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <ctype.h>
;#include <delay.h>
;#include <stdio.h>
;#asm
;PCODE: $0000000D VOL: 0
   .equ __lcd_port=0x1B ;PORTA
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 001F #endasm
;#include <lcd.h>
;// Alphanumeric LCD functions
;
;// Declare your global variables here
;
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 8
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE <= 256
;unsigned char rx_wr_index=0,rx_rd_index=0;
;#else
;unsigned int rx_wr_index=0,rx_rd_index=0;
;#endif
;
;#if RX_BUFFER_SIZE < 256
;unsigned char rx_counter=0;
;#else
;unsigned int rx_counter=0;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;unsigned char sotonenamayesh=5;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 0041 {

	.CSEG
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0042 
; 0000 0043 //  char lcd_buffer[32];
; 0000 0044 char status,data,ok;
; 0000 0045 
; 0000 0046 status=UCSRA;
;PCODE: $00000012 VOL: 0
;	status -> R17
;	data -> R16
;	ok -> R19
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0047 data=UDR;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0048 
; 0000 0049 
; 0000 004A if(sotonenamayesh==10){sotonenamayesh=5; delay_ms(600);}
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 004B if(data=='@') goto no_display1;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 004C if(data=='A') goto no_display2;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 004D if(data=='D') goto no_display3;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 004E if(data=='#'){
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 004F sotonenamayesh=5;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0050 goto no_display1;
;PCODE: $00000033 VOL: 0
; 0000 0051 }
; 0000 0052 //------------------------------------------
; 0000 0053 if(data=='.') goto dis_allow;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0054 //if(data=='A') { goto dis_allow; PORTD=1; }
; 0000 0055 //ok=data;
; 0000 0056 ok=isdigit(data);
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0057 if(ok!=1){
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0058 lcd_gotoxy(sotonenamayesh,0);
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0059 goto exit;
;PCODE: $00000043 VOL: 0
; 0000 005A }
; 0000 005B dis_allow:
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 005C //-----------------------------------------------
; 0000 005D lcd_gotoxy(sotonenamayesh,0);
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 005E lcd_putchar(data);
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 005F 
; 0000 0060 
; 0000 0061 
; 0000 0062 exit:
;PCODE: $0000004B VOL: 0
; 0000 0063 sotonenamayesh++;
;PCODE: $0000004C VOL: 0
; 0000 0064 
; 0000 0065 no_display1:
;PCODE: $0000004D VOL: 0
; 0000 0066 //delay_ms(1000);
; 0000 0067 lcd_gotoxy(0,1);
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0068 if(data=='@') {PORTB.2=0 ; PORTB.3=0 ; }
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0069 //lcd_puts(lcd_buffer);
; 0000 006A 
; 0000 006B     no_display2:
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 006C     if(data=='A'){ PORTB.2=1 ; PORTB.3=0 ; }
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 006D     no_display3:
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 006E     if(data=='D'){ PORTB.2=1 ; PORTB.3=1 ; }
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 006F 
; 0000 0070 
; 0000 0071                     lcd_gotoxy(0,1);
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0072 
; 0000 0073 
; 0000 0074 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0075    {
; 0000 0076    rx_buffer[rx_wr_index++]=data;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0077 #if RX_BUFFER_SIZE == 256
; 0000 0078    // special case for receiver buffer size=256
; 0000 0079    if (++rx_counter == 0) rx_buffer_overflow=1;
; 0000 007A #else
; 0000 007B    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 007C    if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 007D       {
; 0000 007E       rx_counter=0;
;PCODE: $00000081 VOL: 0
; 0000 007F       rx_buffer_overflow=1;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0080       }
; 0000 0081 #endif
; 0000 0082    }
;PCODE: $00000085 VOL: 0
; 0000 0083 }
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 008A {
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 008B char data;
; 0000 008C while (rx_counter==0);
;PCODE: $0000008E VOL: 0
;	data -> R17
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 008D data=rx_buffer[rx_rd_index++];
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 008E #if RX_BUFFER_SIZE != 256
; 0000 008F if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 0090 #endif
; 0000 0091 #asm("cli")
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
	cli
;PCODE: $0000009F VOL: 0
; 0000 0092 --rx_counter;
;PCODE: $000000A0 VOL: 0
; 0000 0093 #asm("sei")
;PCODE: $000000A1 VOL: 0
	sei
;PCODE: $000000A2 VOL: 0
; 0000 0094 return data;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 0095 }
;PCODE: $000000A6 VOL: 0
;#pragma used-
;#endif
;
;
;
;void main(void)
; 0000 009C {
;PCODE: $000000A7 VOL: 0
; 0000 009D 
; 0000 009E DDRD=0X00;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 009F PORTD=0XFF;
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 00A0 DDRC=0X00;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 00A1 PORTC=0XFF;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00A2 DDRB=0XFF;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 00A3 
; 0000 00A4 // USART initialization
; 0000 00A5 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00A6 // USART Receiver: On
; 0000 00A7 // USART Transmitter: Off
; 0000 00A8 // USART Mode: Asynchronous
; 0000 00A9 // USART Baud Rate: 4800
; 0000 00AA UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 00AB UCSRB=(1<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 00AC UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00AD UBRRH=0x00;
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 00AE UBRRL=0x19;
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 00AF 
; 0000 00B0 
; 0000 00B1 lcd_init(16);
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 00B2 lcd_putsf("mehran tamjidi");
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 00B3 lcd_gotoxy(1,0);
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 00B4 delay_ms(1000);
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 00B5 lcd_clear();
;PCODE: $000000C7 VOL: 0
; 0000 00B6 lcd_putsf("dama=");
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 00B7 lcd_gotoxy(0,0);
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 00B8 delay_ms(500);
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00B9 #asm("sei")
;PCODE: $000000D1 VOL: 0
	sei
;PCODE: $000000D2 VOL: 0
; 0000 00BA PORTB.7=0;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 00BB 
; 0000 00BC puts("AT+C021") ;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 00BD PORTB.7=1;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 00BE while (1)
;PCODE: $000000DA VOL: 0
; 0000 00BF       {
; 0000 00C0       // Place your code here
; 0000 00C1 
; 0000 00C2       }
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 00C3 }
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0

	.DSEG
_0x27:
	.BYTE 0x8
;
;
;
