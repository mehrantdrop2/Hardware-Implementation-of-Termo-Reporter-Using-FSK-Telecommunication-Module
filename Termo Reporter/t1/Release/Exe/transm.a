;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 12/29/2019
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega16A
;Program type            : Application
;AVR Core Clock frequency: 4.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega16a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#include <delay.h>
;#include <stdio.h>
;//_________________________________________
;interrupt [ADC_INT] void adc_isr(){
; 0000 001D interrupt [15] void adc_isr(){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 001E unsigned int adc_data;
; 0000 001F float   volt;
; 0000 0020 adc_data=ADCW;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;	adc_data -> R16,R17
;	volt -> Y+2
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0021 volt=adc_data*2.56/1024;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0022 volt=volt*100;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0023 if(volt>=10&& volt<40){ printf("@%2.2f#",volt); PORTB.3=0;}
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0024 else if(volt>40 && volt<55 ){ printf("@%2.2f#",volt);PORTB.3=1; }
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0025 else if( volt>55 && volt<60 ){ printf("A%2.2f#",volt) ;PORTB.3=1; }
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0026 else if( volt>60 && volt<90 ){ printf("D%2.2f#",volt) ;PORTB.3=1; }
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0027 else  {printf("@0%2.2f#",volt);   PORTB.3=0;}
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0028 delay_ms(250);
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 0029 ADCSRA=0XCF;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 002A }
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;//__________________________________________
;void main(){
; 0000 002C void main(){
;PCODE: $000000A0 VOL: 0
; 0000 002D DDRD=0XFF;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 002E PORTD=0X00;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 002F DDRB=0XFF;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 0030 
; 0000 0031 ACSR=0XC0;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 0032 SFIOR=0X00;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 0033 ADMUX=0XC0;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 0034 ADCSRA=0X8F;
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 0035 // USART initialization
; 0000 0036 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0037 // USART Receiver: Off
; 0000 0038 // USART Transmitter: On
; 0000 0039 // USART Mode: Asynchronous
; 0000 003A // USART Baud rate: 4800
; 0000 003B UCSRA=0x00;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 003C UCSRB=0x08;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 003D UCSRC=0x86;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 003E UBRRH=0x00;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 003F UBRRL=0x33;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 0040 #asm("sei")
;PCODE: $000000B9 VOL: 0
	sei
;PCODE: $000000BA VOL: 0
; 0000 0041 ADCSRA=0XCF;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 0042 while(1){
;PCODE: $000000BD VOL: 0
; 0000 0043  };
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 0044 }
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
